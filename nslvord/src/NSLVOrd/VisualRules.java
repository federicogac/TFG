/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package NSLVOrd;

import Rule.Rule;
import java.util.ArrayList;

/**
 *
 * @author kete1
 */
public class VisualRules extends javax.swing.JFrame {

    static private FuzzyProblemClass _fuzzyProblem; 
    static private RuleSetClass _R;
    
    /**
     * Creates new form VisualRules
     */
    public VisualRules(FuzzyProblemClass fuzzyProblem, RuleSetClass R) {
        initComponents();
        _fuzzyProblem = fuzzyProblem;
        _R = R;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        _cont = new javax.swing.JScrollPane();
        _lista = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout _listaLayout = new javax.swing.GroupLayout(_lista);
        _lista.setLayout(_listaLayout);
        _listaLayout.setHorizontalGroup(
            _listaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 14, Short.MAX_VALUE)
        );
        _listaLayout.setVerticalGroup(
            _listaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 16, Short.MAX_VALUE)
        );

        _cont.setViewportView(_lista);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(_cont, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(_cont, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public void SeeRules(){
        int numRules= _R.getNumRules();
        String consequent_variable;
        String consequent_term;
        int conseqIndex;
        int num_rule = 0;
        int h = 6,w = _lista.getWidth();
        
        // RULES
        for(int i = 0; i < numRules; i++) {
            // CONSEQUENT
            conseqIndex = _fuzzyProblem.consequentIndex();
            consequent_variable = _fuzzyProblem.getFuzzyLinguisticVariableList(conseqIndex).getName();
            consequent_term = _fuzzyProblem.getFuzzyLinguisticVariableList(conseqIndex).getFuzzyLinguisticTermList(_R.getRules(i).getIntegerMatrix(0,0)).getName();
            
            // ANTECEDENT
            Rule[] comb_ant = getAntecedent(i);
            
            // ADD RULES
            for(Rule rule : comb_ant) {
                rule.number(num_rule);
                rule.consequent(consequent_variable,consequent_term);
                rule.setLocation(6,h);
                rule.setSize(rule.getPreferredSize());
                h += rule.getHeight() + 6;
                if(w < rule.getWidth() + 6) w = rule.getWidth() + 6;
                num_rule++;
                
                _lista.add(rule);
            }
        }
        
        _lista.setPreferredSize(new java.awt.Dimension(w,h));
        this.setVisible(true);
    }
    
    private static Rule[] getAntecedent(int rule) {
        Rule[] rules;
        double infMeasureClass, actInfMeasure;
        int comb,numVariables,valueLabel,numLabels,tamBloc,start,conseqIndex,index;
        ArrayList validTerm;
        ArrayList aux;
        FuzzyLinguisticVariableClass auxLinguisticVar;
        FuzzyLinguisticTermClass auxLinguisticTerm;
        
        // Obtener las variables y terminos que van en la regla
        conseqIndex = _fuzzyProblem.consequentIndex();
        tamBloc= _R.getRules(rule).getSizeRealBlocs(0);
        numVariables = _fuzzyProblem.getFuzzyLinguisticVariableNum();
        infMeasureClass= _R.getRules(rule).getRealMatrix(0, tamBloc-1);
        start = 0;
        validTerm = new ArrayList();
        comb = 1;
        for (int j=0; j < numVariables-1; j++){
            numLabels = _fuzzyProblem.getFuzzyLinguisticVariableList(j).getFuzzyLinguisticTermNum();
            actInfMeasure= _R.getRules(rule).getRealMatrix(0, j);
            aux = new ArrayList();
            if ((_R.getRules(rule).binaryMatrix0AllToOne(start,numLabels) != 1) && // si todas las etiquetas están a 1 --> irrelevante
               (j != conseqIndex && actInfMeasure >= infMeasureClass)){// la medida de información de la variable es >= que la de la clase
                for (int k=0; k < numLabels; k++){
                    valueLabel= _R.getRules(rule).getBinaryMatrix(0,start+k);
                    if (valueLabel == 1){
                        aux.add(_fuzzyProblem.getFuzzyLinguisticVariableList(j).getFuzzyLinguisticTermList(k));//.getName());
                    }
                }
                if(!aux.isEmpty()){
                    comb *= aux.size();
                    aux.add(_fuzzyProblem.getFuzzyLinguisticVariableList(j).getName());
                    validTerm.add(aux);
                }
            }
            start= start+numLabels;
        }
        
        // Hacer las combinaciones de los terminos entre las variables
        rules = new Rule[comb];
         for(int i = 0; i < comb; i++){
            rules[i] = new Rule();
            start = comb;
            index = i;
            for(int j = 0; j < validTerm.size(); j++){
                aux = (ArrayList) validTerm.get(j);
                start = start/(aux.size()-1);
                String a = (String) aux.get(aux.size()-1);
                FuzzyLinguisticTermClass b = (FuzzyLinguisticTermClass) aux.get(index/start);
                if((float)b.getA() == (float)b.getB() && (float)b.getA() == (float)b.getC() && (float)b.getA() == (float)b.getD()){
                    rules[i].add_categoric_antecedent(a,b.getName());
                }else{
                    rules[i].add_fuzzy_antecedent(a,(float)b.getA(),0,(float)b.getB(),1,(float)b.getC(),1,(float)b.getD(),0);
                }
                index = index - start * (index/start); 
            }
        }
        
        return rules;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane _cont;
    private javax.swing.JPanel _lista;
    // End of variables declaration//GEN-END:variables
}
